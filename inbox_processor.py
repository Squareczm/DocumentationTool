#!/usr/bin/env python3
"""
Êô∫ËÉΩÊñá‰ª∂Êï¥ÁêÜÂä©Êâã - Êñá‰ª∂Â§πÊâπÂ§ÑÁêÜÁâàÊú¨

ÁõëÊéßÊàñÊâπÈáèÂ§ÑÁêÜÊñá‰ª∂Â§π‰∏≠ÁöÑÊñá‰ª∂ÔºåËá™Âä®Êï¥ÁêÜÂΩíÊ°£Âà∞Áü•ËØÜÂ∫ì‰∏≠„ÄÇ
"""

import sys
import time
import logging
from pathlib import Path
from typing import List, Optional
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

import click
from colorama import init, Fore, Style

# ÂàùÂßãÂåñcolorama
init()

# Ê∑ªÂä†srcÁõÆÂΩïÂà∞Ë∑ØÂæÑ
sys.path.append(str(Path(__file__).parent / 'src'))

from src.config_manager import ConfigManager
from src.file_processor import FileProcessor
from src.llm_client import LLMClient
from src.utils import setup_logging, print_banner


class InboxHandler(FileSystemEventHandler):
    """Êñá‰ª∂Â§πÁõëÊéßÂ§ÑÁêÜÂô®"""
    
    def __init__(self, processor_instance):
        self.processor = processor_instance
        self.logger = logging.getLogger(__name__)
        # Èò≤Ê≠¢ÈáçÂ§çÂ§ÑÁêÜÁöÑÊñá‰ª∂ÈõÜÂêà
        self.processing_files = set()
    
    def on_created(self, event):
        """Êñá‰ª∂ÂàõÂª∫Êó∂ÁöÑÂ§ÑÁêÜ"""
        if not event.is_directory:
            file_path = Path(event.src_path)
            # Âª∂Ëøü‰∏ÄÁßíÁ°Æ‰øùÊñá‰ª∂ÂÆåÂÖ®ÂÜôÂÖ•
            time.sleep(1)
            self.process_file_safe(file_path)
    
    def on_moved(self, event):
        """Êñá‰ª∂ÁßªÂä®Êó∂ÁöÑÂ§ÑÁêÜ"""
        if not event.is_directory:
            file_path = Path(event.dest_path)
            self.process_file_safe(file_path)
    
    def process_file_safe(self, file_path: Path):
        """ÂÆâÂÖ®Â§ÑÁêÜÊñá‰ª∂ÔºàÈÅøÂÖçÈáçÂ§çÂ§ÑÁêÜÔºâ"""
        if str(file_path) in self.processing_files:
            return
        
        try:
            self.processing_files.add(str(file_path))
            if file_path.exists():
                self.processor.process_single_file(file_path)
        finally:
            self.processing_files.discard(str(file_path))


class InboxProcessor:
    """Êñá‰ª∂Â§πÊâπÂ§ÑÁêÜÂô®"""
    
    def __init__(self, config_path: str = None):
        """ÂàùÂßãÂåñÂ§ÑÁêÜÂô®"""
        # Âä†ËΩΩÈÖçÁΩÆ
        self.config_manager = ConfigManager(config_path=config_path)
        self.config = self.config_manager.config
        
        # ËÆæÁΩÆÊó•Âøó
        setup_logging(self.config, verbose=True)
        self.logger = logging.getLogger(__name__)
        
        # ÂàùÂßãÂåñÊ†∏ÂøÉÁªÑ‰ª∂
        self.llm_client = LLMClient(self.config)
        self.file_processor = FileProcessor(self.config, self.llm_client)
        
        # ËÆæÁΩÆÈªòËÆ§Êñá‰ª∂Â§πË∑ØÂæÑ
        self.inbox_folder = Path("./inbox")
        self.processed_folder = Path("./processed")
        
        # ÂàõÂª∫ÂøÖË¶ÅÁöÑÊñá‰ª∂Â§π
        self.setup_folders()
    
    def setup_folders(self):
        """ËÆæÁΩÆÂøÖË¶ÅÁöÑÊñá‰ª∂Â§π"""
        self.inbox_folder.mkdir(exist_ok=True)
        self.processed_folder.mkdir(exist_ok=True)
        
        # ÂàõÂª∫ËØ¥ÊòéÊñá‰ª∂
        readme_path = self.inbox_folder / "README.md"
        if not readme_path.exists():
            readme_path.write_text("""# üì• ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§π

## ‰ΩøÁî®ËØ¥Êòé

1. **Áõ¥Êé•ÊãñÊîæÊñá‰ª∂**ÔºöÂ∞ÜÈúÄË¶ÅÊï¥ÁêÜÁöÑÊñá‰ª∂Áõ¥Êé•ÊãñÊîæÂà∞Ê≠§Êñá‰ª∂Â§π‰∏≠
2. **ÊîØÊåÅÁöÑÊ†ºÂºè**Ôºö
   - WordÊñáÊ°£ (.docx)
   - ExcelË°®Ê†º (.xlsx) 
   - PDFÊñáÊ°£ (.pdf)
   - ÊñáÊú¨Êñá‰ª∂ (.txt)
   - MarkdownÊñá‰ª∂ (.md)

3. **Ëá™Âä®Â§ÑÁêÜ**Ôºö
   - Á®ãÂ∫è‰ºöËá™Âä®Ê£ÄÊµãÊñ∞Êñá‰ª∂
   - ‰ΩøÁî®AIÂàÜÊûêÊñáÊ°£ÂÜÖÂÆπ
   - Ëá™Âä®ÈáçÂëΩÂêçÂπ∂ÂΩíÊ°£Âà∞Áü•ËØÜÂ∫ì

4. **Â§ÑÁêÜÂÆåÊàêÂêé**Ôºö
   - ÂéüÊñá‰ª∂‰ºöÁßªÂä®Âà∞ `../processed/` Êñá‰ª∂Â§π
   - Êï¥ÁêÜÂêéÁöÑÊñá‰ª∂‰øùÂ≠òÂú® `../knowledge_base/` ‰∏≠

## ÊâπÈáèÂ§ÑÁêÜÂëΩ‰ª§

```bash
# Â§ÑÁêÜÂΩìÂâçÊñá‰ª∂Â§π‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂
python inbox_processor.py --process-all

# ÂºÄÂêØÊñá‰ª∂Â§πÁõëÊéßÊ®°Âºè
python inbox_processor.py --watch

# Â§ÑÁêÜÊåáÂÆöÊñá‰ª∂Â§π
python inbox_processor.py --folder "‰Ω†ÁöÑÊñá‰ª∂Â§πË∑ØÂæÑ"
```

---
*Â∞ÜÊñá‰ª∂ÊãñÊîæÂà∞Ê≠§Êñá‰ª∂Â§πÂç≥ÂèØÂºÄÂßãÊï¥ÁêÜÔºÅ*
""", encoding='utf-8')
    
    def process_all_files(self, auto_confirm: bool = False) -> dict:
        """Â§ÑÁêÜÊñá‰ª∂Â§π‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂"""
        print_banner()
        
        # Ëé∑ÂèñÊâÄÊúâÊîØÊåÅÁöÑÊñá‰ª∂
        files = self.get_supported_files()
        
        if not files:
            click.echo(f"{Fore.YELLOW}üìÇ ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§π‰∏∫Á©∫{Style.RESET_ALL}")
            return {'total': 0, 'success': 0, 'failed': 0, 'skipped': 0}
        
        click.echo(f"{Fore.CYAN}üìÅ ÂèëÁé∞ {len(files)} ‰∏™ÂæÖÂ§ÑÁêÜÊñá‰ª∂{Style.RESET_ALL}")
        
        if not auto_confirm:
            if not click.confirm(f"\nü§ñ ÊòØÂê¶ÂºÄÂßãÊô∫ËÉΩÊï¥ÁêÜËøô‰∫õÊñá‰ª∂Ôºü"):
                click.echo(f"{Fore.YELLOW}‚ùå Áî®Êà∑ÂèñÊ∂àÊìç‰Ωú{Style.RESET_ALL}")
                return {'total': 0, 'success': 0, 'failed': 0, 'skipped': 0}
        
        # Â§ÑÁêÜÊâÄÊúâÊñá‰ª∂
        results = {'total': len(files), 'success': 0, 'failed': 0, 'skipped': 0}
        
        for i, file_path in enumerate(files, 1):
            click.echo(f"\n{Fore.BLUE}[{i}/{len(files)}] üîÑ Â§ÑÁêÜ: {file_path.name}{Style.RESET_ALL}")
            
            try:
                success = self.process_single_file(file_path)
                if success:
                    results['success'] += 1
                else:
                    results['skipped'] += 1
            except Exception as e:
                self.logger.error(f"Â§ÑÁêÜÊñá‰ª∂Â§±Ë¥• {file_path}: {e}")
                click.echo(f"  {Fore.RED}‚ùå Â§ÑÁêÜÂ§±Ë¥•: {str(e)}{Style.RESET_ALL}")
                results['failed'] += 1
        
        # ÊòæÁ§∫Â§ÑÁêÜÁªìÊûú
        self.display_summary(results)
        return results
    
    def process_single_file(self, file_path: Path) -> bool:
        """Â§ÑÁêÜÂçï‰∏™Êñá‰ª∂"""
        try:
            # ‰ΩøÁî®Êñá‰ª∂Â§ÑÁêÜÂô®Â§ÑÁêÜÊñá‰ª∂
            result = self.file_processor.process_file(file_path, dry_run=False)
            
            if result['status'] == 'error':
                click.echo(f"  {Fore.RED}‚ùå ÂàÜÊûêÂ§±Ë¥•: {result['error']}{Style.RESET_ALL}")
                return False
            
            # ÊòæÁ§∫Â§ÑÁêÜ‰ø°ÊÅØ
            click.echo(f"  {Fore.CYAN}üéØ ‰∏ª‰Ωì: {result['subject']}{Style.RESET_ALL}")
            click.echo(f"  {Fore.CYAN}üìÖ Êó•Êúü: {result['date']}{Style.RESET_ALL}")
            click.echo(f"  {Fore.YELLOW}üìù Êñ∞ÂêçÁß∞: {result['new_name']}{Style.RESET_ALL}")
            click.echo(f"  {Fore.MAGENTA}üìÅ Â≠òÂÇ®Ë∑ØÂæÑ: {Path(result['target_path']).parent}{Style.RESET_ALL}")
            
            # ÊâßË°åÊñá‰ª∂Êìç‰Ωú
            final_result = self.file_processor.execute_operation(result)
            
            if final_result['status'] == 'success':
                click.echo(f"  {Fore.GREEN}‚úÖ Êï¥ÁêÜÂÆåÊàê{Style.RESET_ALL}")
                
                # ÁßªÂä®ÂéüÊñá‰ª∂Âà∞Â∑≤Â§ÑÁêÜÊñá‰ª∂Â§π
                processed_path = self.processed_folder / file_path.name
                if file_path.exists():
                    file_path.rename(processed_path)
                    click.echo(f"  {Fore.BLUE}üì¶ ÂéüÊñá‰ª∂Â∑≤ÁßªËá≥: {processed_path}{Style.RESET_ALL}")
                
                return True
            else:
                click.echo(f"  {Fore.RED}‚ùå Êìç‰ΩúÂ§±Ë¥•: {final_result.get('error', 'Êú™Áü•ÈîôËØØ')}{Style.RESET_ALL}")
                return False
                
        except Exception as e:
            self.logger.error(f"Â§ÑÁêÜÊñá‰ª∂ÂºÇÂ∏∏ {file_path}: {e}")
            click.echo(f"  {Fore.RED}üí• Â§ÑÁêÜÂºÇÂ∏∏: {str(e)}{Style.RESET_ALL}")
            return False
    
    def get_supported_files(self) -> List[Path]:
        """Ëé∑ÂèñÊñá‰ª∂Â§π‰∏≠ÊâÄÊúâÊîØÊåÅÁöÑÊñá‰ª∂"""
        supported_extensions = self.config['file_processing']['supported_extensions']
        files = []
        
        for file_path in self.inbox_folder.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in supported_extensions:
                # Ë∑≥ËøáREADMEÊñá‰ª∂
                if file_path.name.lower() != 'readme.md':
                    files.append(file_path)
        
        return sorted(files)
    
    def watch_folder(self):
        """ÁõëÊéßÊñá‰ª∂Â§πÂèòÂåñ"""
        click.echo(f"{Fore.GREEN}üëÄ ÂºÄÂßãÁõëÊéßÊñá‰ª∂Â§π: {self.inbox_folder.absolute()}{Style.RESET_ALL}")
        click.echo(f"{Fore.CYAN}üí° ËØ∑Â∞ÜÂæÖÂ§ÑÁêÜÊñá‰ª∂ÊãñÊîæÂà∞‰∏äËø∞Êñá‰ª∂Â§π‰∏≠{Style.RESET_ALL}")
        click.echo(f"{Fore.YELLOW}‚èπÔ∏è  Êåâ Ctrl+C ÂÅúÊ≠¢ÁõëÊéß{Style.RESET_ALL}\n")
        
        # ËÆæÁΩÆÊñá‰ª∂Â§πÁõëÊéß
        event_handler = InboxHandler(self)
        observer = Observer()
        observer.schedule(event_handler, str(self.inbox_folder), recursive=False)
        
        try:
            observer.start()
            
            # È¶ñÂÖàÂ§ÑÁêÜÁé∞ÊúâÊñá‰ª∂
            existing_files = self.get_supported_files()
            if existing_files:
                click.echo(f"{Fore.CYAN}üìÅ ÂèëÁé∞ {len(existing_files)} ‰∏™Áé∞ÊúâÊñá‰ª∂ÔºåÂºÄÂßãÂ§ÑÁêÜ...{Style.RESET_ALL}")
                for file_path in existing_files:
                    self.process_single_file(file_path)
            
            # ÊåÅÁª≠ÁõëÊéß
            while True:
                time.sleep(1)
                
        except KeyboardInterrupt:
            click.echo(f"\n{Fore.YELLOW}üõë ÁõëÊéßÂ∑≤ÂÅúÊ≠¢{Style.RESET_ALL}")
        finally:
            observer.stop()
            observer.join()
    
    def display_summary(self, results: dict):
        """ÊòæÁ§∫Â§ÑÁêÜÁªìÊûúÊëòË¶Å"""
        click.echo(f"\n{Fore.CYAN}{'='*50}")
        click.echo(f"üìä ÊâπÈáèÂ§ÑÁêÜÂÆåÊàêÁªüËÆ°:")
        click.echo(f"  üìÅ ÊÄªÊñá‰ª∂Êï∞: {results['total']}")
        click.echo(f"  {Fore.GREEN}‚úÖ ÊàêÂäü: {results['success']}{Style.RESET_ALL}")
        click.echo(f"  {Fore.RED}‚ùå Â§±Ë¥•: {results['failed']}{Style.RESET_ALL}")
        if results['skipped'] > 0:
            click.echo(f"  {Fore.YELLOW}‚è≠Ô∏è Ë∑≥Ëøá: {results['skipped']}{Style.RESET_ALL}")
        click.echo(f"{'='*50}{Style.RESET_ALL}")


@click.command()
@click.option('--folder', '-f', type=click.Path(exists=True), 
              help='ÊåáÂÆöÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§πË∑ØÂæÑÔºàÈªòËÆ§: ./inboxÔºâ')
@click.option('--config', '-c', type=click.Path(exists=True), 
              help='ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑÔºàÈªòËÆ§: config.yamlÔºâ')
@click.option('--process-all', '-a', is_flag=True, 
              help='Â§ÑÁêÜÊñá‰ª∂Â§π‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂')
@click.option('--watch', '-w', is_flag=True, 
              help='ÂºÄÂêØÊñá‰ª∂Â§πÁõëÊéßÊ®°Âºè')
@click.option('--auto-confirm', '-y', is_flag=True, 
              help='Ëá™Âä®Á°ÆËÆ§ÔºåË∑≥ËøáÁî®Êà∑Á°ÆËÆ§')
def main(folder, config, process_all, watch, auto_confirm):
    """
    Êô∫ËÉΩÊñá‰ª∂Êï¥ÁêÜÂä©Êâã - Êñá‰ª∂Â§πÊâπÂ§ÑÁêÜÁâàÊú¨
    
    Â∞ÜÊñá‰ª∂ÊîæÂÖ•ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§πÔºåÁ®ãÂ∫èËá™Âä®Êï¥ÁêÜÂΩíÊ°£„ÄÇ
    
    ‰ΩøÁî®ÊñπÊ≥ïÔºö
    1. Â∞ÜÊñá‰ª∂ÊãñÊîæÂà∞ ./inbox/ Êñá‰ª∂Â§π
    2. ËøêË°åÂëΩ‰ª§ËøõË°åÊâπÈáèÂ§ÑÁêÜ
    
    Á§∫‰æãÔºö
        # Â§ÑÁêÜÊâÄÊúâÂæÖÂ§ÑÁêÜÊñá‰ª∂
        python inbox_processor.py --process-all
        
        # ÂºÄÂêØÁõëÊéßÊ®°Âºè
        python inbox_processor.py --watch
        
        # Â§ÑÁêÜÊåáÂÆöÊñá‰ª∂Â§π
        python inbox_processor.py --folder "/path/to/files" --process-all
    """
    
    try:
        # ÂàõÂª∫Â§ÑÁêÜÂô®ÂÆû‰æã
        processor = InboxProcessor(config_path=config)
        
        # Â¶ÇÊûúÊåáÂÆö‰∫ÜËá™ÂÆö‰πâÊñá‰ª∂Â§π
        if folder:
            processor.inbox_folder = Path(folder)
        
        if watch:
            # ÁõëÊéßÊ®°Âºè
            processor.watch_folder()
        elif process_all:
            # ÊâπÈáèÂ§ÑÁêÜÊ®°Âºè
            processor.process_all_files(auto_confirm=auto_confirm)
        else:
            # ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
            click.echo(f"{Fore.CYAN}ü§ñ Êô∫ËÉΩÊñá‰ª∂Êï¥ÁêÜÂä©Êâã - Êñá‰ª∂Â§πÊâπÂ§ÑÁêÜÁâàÊú¨{Style.RESET_ALL}")
            click.echo(f"\nüìÅ ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§π: {processor.inbox_folder.absolute()}")
            click.echo(f"üìö Áü•ËØÜÂ∫ìË∑ØÂæÑ: {processor.file_processor.knowledge_base_path.absolute()}")
            
            files = processor.get_supported_files()
            if files:
                click.echo(f"\n{Fore.YELLOW}üìã ÂèëÁé∞ {len(files)} ‰∏™ÂæÖÂ§ÑÁêÜÊñá‰ª∂Ôºö{Style.RESET_ALL}")
                for file in files:
                    click.echo(f"  üìÑ {file.name}")
                    
                click.echo(f"\nüí° ‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§ÂºÄÂßãÂ§ÑÁêÜÔºö")
                click.echo(f"  {Fore.GREEN}python inbox_processor.py --process-all{Style.RESET_ALL}")
                click.echo(f"  {Fore.GREEN}python inbox_processor.py --watch{Style.RESET_ALL}")
            else:
                click.echo(f"\n{Fore.YELLOW}üìÇ ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§π‰∏∫Á©∫{Style.RESET_ALL}")
                click.echo(f"üí° ËØ∑Â∞ÜÊñá‰ª∂ÊãñÊîæÂà∞ {processor.inbox_folder} Êñá‰ª∂Â§π‰∏≠")
            
    except Exception as e:
        click.echo(f"{Fore.RED}‚ùå Á®ãÂ∫èËøêË°åÂá∫Èîô: {str(e)}{Style.RESET_ALL}")
        logging.error(f"Á®ãÂ∫èËøêË°åÂá∫Èîô: {str(e)}", exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    main() 